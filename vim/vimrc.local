" Appearance
colorscheme molokai
let g:airline_theme='molokai'
set colorcolumn=80

nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>"
set fileencodings=utf8,gbk

" Fix tmux mouse support for vim split resizing
set ttymouse=xterm2

" Disable some features brought by spf13
let g:indent_guides_enable_on_vim_startup = 0
set nospell
set nolist

" Enable per-directory .vimrc
" TODO: this approach is not safe enough
set exrc
set secure

" Custom NERDTree
let g:NERDTreeWinSize=35
let g:NERDTreeQuitOnOpen=0

" Tab switching
noremap <S-H> gT
noremap <S-L> gt

" Window switching
noremap <C-J> <C-W>j<C-W>
noremap <C-K> <C-W>k<C-W>
noremap <C-L> <C-W>l<C-W>
noremap <C-H> <C-W>h<C-W>

" Set F3-F6
noremap <F3> :NERDTreeToggle .<CR>
nnoremap <F4> :TagbarToggle<CR>
nmap <script> <silent> <F5> :call ToggleQuickfixList()<CR>
set pastetoggle=<F6>

" grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!"
let g:agprg="ag -R --column"
let g:aghighlight=1
nnoremap \ :Ag<SPACE>

" Disable whitespace detection
let g:airline#extensions#whitespace#enabled=0
" Disable bufferline integeration
let g:airline#extensions#bufferline#enabled=0
" Disable airline-tmuxline extension
let g:airline#extensions#tmuxline#enabled=0

" Smooth scroll
noremap <silent> <C-U> :call smooth_scroll#up(&scroll, 15, 2)<CR>
noremap <silent> <C-D> :call smooth_scroll#down(&scroll, 15, 2)<CR>
" noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
" noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>

" Buffer related keys
" noremap <silent> <C-M> :CtrlPMRU<CR>
noremap <C-X> :bdel<CR>
noremap <C-F> :LustyFilesystemExplorer<CR>
noremap <C-B> :LustyJuggler<CR>
"noremap <c-l> :LustyJugglePrevious<CR>
let g:LustyJugglerAltTabMode = 1

" CtrlP
let g:ctrlp_match_window_bottom=0
let g:ctrlp_match_window_reversed=0
"let g:ctrlp_custom_ignore='\v\~$|\.(o|swp|pyc)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode=0
let g:ctrlp_dotfiles=0
let g:ctrlp_switch_buffer='Et'

" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim... 
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    " http://cscope.sourceforge.net/cscope_maps.vim
    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  

    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif
